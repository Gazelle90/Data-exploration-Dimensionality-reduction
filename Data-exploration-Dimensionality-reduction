{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## OUTLINE: \n",
    "\n",
    "\n",
    "\n",
    "1. Reading the file\n",
    "2. Missing Values\n",
    "3. Impute with scikit-learn\n",
    "4. Implement imputation\n",
    "5. Plotting\n",
    "6. Standardization\n",
    "7. Dimensionality reduction\n",
    "8. Multi-Dimensional Scaling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# List of the Libraries used in this project :\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import numpy as np \n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt \n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.manifold import MDS\n",
    "\n",
    "from matplotlib.colors import ListedColormap\n",
    "\n",
    "\n",
    "RSEED = 8\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DATA PRE-PROCESSING, PLOTTING AND DIMENSIONALITY REDUCTION"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "According to the information on the data, it has eight attributes and one binary class. The brief explanation of the attributes are as follows:\n",
    "\n",
    "- Pregnancies: Number of times pregnant.\n",
    "\n",
    "- Glucose: Plasma glucose concentration a 2 hours in an oral glucose tolerance test.\n",
    "\n",
    "- BloodPressure: Diastolic blood pressure (mm Hg).\n",
    "\n",
    "- SkinThickness: Triceps skin fold thickness (mm).\n",
    "\n",
    "- Insulin: 2-Hour serum insulin (mu U/ml).\n",
    "\n",
    "- BMI: Body mass index (weight in kg/(height in m)^2).\n",
    "\n",
    "- DiabetesPedigreeFunction: Diabetes pedigree function.\n",
    "\n",
    "- Age: Age (years).\n",
    "\n",
    "- and we have a binary class which can be 0 (healthy) or 1 (diabetes)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## *1.* Reading the file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import pandas as pd\n",
    "df = pd.read_csv(\"diabetes.csv\")\n",
    "data = pd.DataFrame(df) \n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Uncomment these lines if you want to see the colomns and some information and describsion about the dataset\n",
    "# data.head(5)\n",
    "# data.describe()\n",
    "# data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## *2.* Missing values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "missing_values = data [[\"Glucose\", \"BloodPressure\", \"SkinThickness\", \"Insulin\", \"BMI\", \"DiabetesPedigreeFunction\", \"Age\"]] == 0\n",
    "\n",
    "\n",
    "missing_values_sum = missing_values.sum()\n",
    "\n",
    "plt.style.use('classic')\n",
    "\n",
    "#For a better observation I plotted the existing missing values excluding the attributes 'Pregnancies', 'Outcome' as they are encoded values\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot()\n",
    "missing_values_sum.plot(kind='bar', color='blue', figsize=(8, 6))\n",
    "ax.set_title(\"Missing Values\")\n",
    "ax.grid(False)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## *3.* Impute with scikit-learn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#creating a new copy of the data frame dataframe \n",
    "data_imputed = pd.DataFrame(data, columns=data.columns)\n",
    "# We have two attributes that should not be imputed (Outcome and pregnancies) so we have to exclude them from the dataset before\n",
    "# imputation\n",
    "columns_to_impute = [\"Glucose\", \"BloodPressure\", \"SkinThickness\", \"Insulin\", \"BMI\", \"DiabetesPedigreeFunction\", \"Age\"]\n",
    "df_part = data[columns_to_impute]\n",
    "df_part.replace( 0.0 , np.nan , inplace=True)\n",
    "\n",
    "imputer = SimpleImputer( strategy='mean')\n",
    "imputer.fit(df_part)\n",
    "data_imputed = imputer.transform(df_part)\n",
    "df_converted =  pd.DataFrame(data_imputed, columns=columns_to_impute)\n",
    "\n",
    "data_imputed = df_converted[columns_to_impute]\n",
    "\n",
    "#copied the two columns that we dropped when we made data_imputed \n",
    "other_columns = ['Pregnancies','Outcome']\n",
    "original_order = data.columns\n",
    "\n",
    "#I arranged the columns as they were in the original data\n",
    "data_imputed[other_columns] = data[other_columns]\n",
    "data_imputed = data_imputed[original_order]\n",
    "data_imputed\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# uncomment these lines for getting information about the imputed data\n",
    "# imputer.statistics_\n",
    "# data_imputed.describe()\n",
    "# data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## *4.* Implement imputation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#created a function that changes the zero (or nan) value to the mean of the attribute of a dataframe\n",
    "def imputation(df, columns_to_imputed):\n",
    "    \n",
    "\n",
    "    \n",
    "    df_part = df[columns_to_imputed].copy()\n",
    "    df_part.replace( 0.0 , np.nan , inplace=True)\n",
    "    \n",
    "    for column in df_part.columns:\n",
    "        mean_value = df_part[column].mean()  \n",
    "        df_part[column].fillna(mean_value, inplace=True)\n",
    "       \n",
    "    df[columns_to_imputed] = df_part\n",
    "    \n",
    "    \n",
    "    \n",
    "    return df "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#store the resulting dataset in diabetes_1, that includes both the imputed attributes and \n",
    "# the ones that you did not impute (Pregnancies, Outcome)\n",
    "columns = [\"Glucose\", \"BloodPressure\", \"SkinThickness\", \"Insulin\", \"BMI\", \"DiabetesPedigreeFunction\", \"Age\"]\n",
    "diabetes_1 = imputation(data, columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "try:\n",
    "    np.testing.assert_allclose(data_imputed.values, diabetes_1.values ) \n",
    "    print(\"result: equal\")\n",
    "except:\n",
    "    print(\"result: not equal\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Uncomment to check the results \n",
    "# diabetes_1.describe()\n",
    "# data_imputed.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## *5.* Plotting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Created 1 figure with a set of 3 subplots (1st subplot is a boxplot for the attribute Glucose)\n",
    "#(2nd subplot is a histogram for the attribute Glucose) and ( 3rd subplot is a scatterplot for the attributes Glucose and BloodPressure, \n",
    "# colored by the attribute 'Outcome'\n",
    "\n",
    "fig, ax = plt.subplots(1, 3, figsize=(16,9)) \n",
    "plt.tight_layout()\n",
    "\n",
    "ax[0].set_title(\"Box plot of Glucose\")\n",
    "sns.boxplot(ax = ax[0],y = data_imputed['Glucose'], color='white')\n",
    "\n",
    "ax[1].set_title('Histogram of Glucose')\n",
    "sns.histplot (data_imputed[\"Glucose\"], ax = ax[1], bins =10, kde= True)\n",
    "\n",
    "\n",
    "\n",
    "ax[2].set_title('Glucose vs BloodPressure')\n",
    "sns.scatterplot(ax = ax[2], x=\"Glucose\", y= 'BloodPressure',hue = 'Outcome', data= data_imputed, palette = 'Set1')\n",
    "ax[2].legend(title = 'Outcome', loc = 'upper right')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Ploting the 'Age' attribute in groups of 10 years in relation to the class ('Outcome')\n",
    "\n",
    "age_bins = pd.cut(data_imputed['Age'], bins=[ 0,19, 29, 39, 49, 59, 69, 79, 100] , labels= ['0-19', '20-29', '30-39', '40-49', '50-59', '60-69', '70-79', '80-100'] ,ordered=False )\n",
    "data_imputed['age_bins'] = age_bins\n",
    "age_by_class = data_imputed.groupby(by='age_bins')['Outcome'].value_counts().unstack()\n",
    "print(age_by_class)\n",
    "age_by_class.plot(kind='bar', figsize=(10, 6))\n",
    "plt.title('Counts of Age Bins by Class')\n",
    "plt.xlabel('Age groups')\n",
    "plt.ylabel('Count')\n",
    "\n",
    "data_imputed.drop(columns=['age_bins'], inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# uncomment this to check the imputed data\n",
    "#data_imputed.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## c.\tYour own multivariate question\n",
    "\n",
    "\n",
    " The task was to think of a multivatiate question that can be answered with a plot."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How do insulin levels and the number of pregnancies jointly influence the likelihood of developing diabetes?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(figsize=(10, 10 )) \n",
    "\n",
    "ax.set_title('Insulin levels & number of pregnancies  influence on developing diabetes')\n",
    "sns.scatterplot(ax = ax, x=\"Pregnancies\", y= 'Insulin',hue = 'Outcome', data= data_imputed, palette = 'Set1')\n",
    "ax.legend(title = 'Outcome', loc = 'upper right')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "The scatter plot shows that insulin levels and the number of pregnancies do not predict diabetes outcomes on their own. However, looking at both factors together suggests that higher insulin levels and more pregnancies might increase the chance of a positive diabetes result. More analysis is needed to confirm this relationship. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## *6.* Standardization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Standardization transforms data to have a mean of zero and a standard deviation of 1. \n",
    "\n",
    "### It is a crucial step before performing PCA, since we are interested in the components that maximize the variance. \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "### `Task: Standardize the data_imputed dataset. You can use sklearn.  Store in a variable called 'y' the attribute 'Outcome' (your class)`\n",
    "### NOTE! Outcome is the class of the dataset indicating if a patient is healthy or has diabetes. As we discussed in the lab, the class should not be included in the standardization. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Standardizing the data_imputed dataset,Using sklearn and \n",
    "# Store in a variable called 'y' the attribute 'Outcome' \n",
    "\n",
    "scaler = StandardScaler()\n",
    "features = data_imputed.drop(columns=['Outcome'])\n",
    "\n",
    "data_scaled = scaler.fit_transform(features) \n",
    "\n",
    "data_standardized = pd.DataFrame(data_scaled, columns=features.columns)\n",
    "\n",
    "\n",
    "y = data_imputed['Outcome']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Uncomment to check the mean of the standardized data \n",
    "# data_standardized.mean()\n",
    "# y.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## *7.* Dimensionality Reduction using PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "pca = PCA(n_components=2, random_state=8)\n",
    "x_pca = pca.fit_transform(data_standardized)\n",
    "explained_variance_ratio =  pca.explained_variance_ratio_ \n",
    "df_principal_components = pd.DataFrame(pca.components_,columns=data_standardized.columns)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Uncomment to Print the information obtained by the following attributes of the pca object:\n",
    "# explained_variance_ratio and components_.\n",
    "df_principal_components\n",
    "explained_variance_ratio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Store in a variable called attribure_contributing_the_most to the variance of the 1st PCA\n",
    "most_contributing_attribute = df_principal_components.iloc[0].abs().idxmax()\n",
    "\n",
    "attribute_contributing_the_most =  most_contributing_attribute\n",
    "\n",
    "print(most_contributing_attribute)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "attribute_contributing_the_most"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## a. Multi-Dimensional Scaling, task a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Apply MDS on the data_standardized with n_components=2 and dissimilarity='euclidean'\n",
    "mds = MDS(n_components=2, dissimilarity='euclidean', random_state=8)\n",
    "\n",
    "X_2d_a = mds.fit_transform(data_standardized) \n",
    "#Plot the 2 resulting coordinates (in a scatterplot) with colors respective to the class labels.`\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.scatterplot(x=X_2d_a[:, 0], y=X_2d_a[:, 1], hue=y.values, palette='viridis', alpha=0.7)\n",
    "\n",
    "plt.title('MDS with Euclidean Dissimilarity')\n",
    "plt.xlabel('MDS Component 1')\n",
    "plt.ylabel('MDS Component 2')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_2d_a"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "d419f0c7497595e68d237e2dc8f4eac5bf2e06b53acfc5f80d3651d7a9e90a8a"
  },
  "kernelspec": {
   "display_name": "Python 3.10.0 ('.venv': venv)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
